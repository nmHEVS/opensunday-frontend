import React, { useState } from "react";
import "./App.css";

export function EstablishmentForm () {
    // Reference
    let nameInputRef = React.createRef();

    /* Emtpy book used in initial state and for resetting the form */
    let emptyEstablishment = { name: '', type: '', site: '', address: '', phone: '', description: '', location: '' };

    /* Form input change handler */
    let handleFormInputChange = (event) => {
        /*
        event is the change event generated by the browser
          - event.target is the form input that is affected
          - target.value is the value of the form field
          - target.name is the name of the form field
        */
        const target = event.target;
        const value = target.value;
        const name = target.name;

        /*
        Update state dynamically by spreading the existing
        newBook object (...prevState.newBook) and overriding
        the property based on the input name ([name]: value)
        The second form of setState is used, as we are
        basing the new value on the previous state
         */
        this.setState((prevState) => ({
            newEstablishment: { ...prevState.newEstablishment, [name]: value },
        }));
    };

    /* Form submission handler */
    let handleFormSubmit = async (event) => {
        /* Prevent the form submission from reloading the page */
        event.preventDefault();

        /* We now call the server to create our new book in the DB */
        /* Method is POST (for creation of resources)              */
        /* Content-Type header is set to application/json          */
        /* The body is the newBook object, stringified as JSON     */
        let newEstablishmentResponse = await fetch(process.env.REACT_APP_SERVER_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(this.state.newBook),
        });

        /* Get the response body, parsed from JSON */
        let newEstablishment = await newEstablishmentResponse.json();

        /* Call the "add book" function that is passed as a prop */
        this.props.addEstablishment(newEstablishment);

        /* Reset the new book state */
        this.resetnewEstablishment();

        /* Focus on the book title after adding a new book */
        this.focusBookTitle();
    };

    /* Method for focusing on the book title, using the created ref */
    let focusBookTitle = (event) => {
        /* Use "current" to access the DOM element linked to the ref */
        /* and use the browser API method "focus"                    */
        this.nameInputRef.current.focus();
    };

    /* Reset the new book object */
    let resetnewEstablishment = () => {
        this.setState({ newBook: this.emptyBook });
    };

    // render() {
        return (
            <>
                {/* Render a form allowing to add a new book to the list */}
                <h2>Add a new Establishment</h2>
                <form onSubmit={handleFormSubmit} className="NewBook-Form">
                    {/* All inputs have been replaced with FormInput components */}
                    <FormInput
                        /* Link the created ref to the title input */
                        fieldRef={nameInputRef}
                        type="text"
                        name="Name"
                        // value={this.state.newEstablishment.name}
                        onChange={handleFormInputChange}
                        placeholder="Name"
                    />
                    <label>
                        Establishment type :
                        <select>
                            <option value="Restaurant">Restaurant</option>
                            <option value="Barpub">Bar/pub</option>
                            <option value="Cinema">Cinema</option>
                            <option value="Museum">Museum</option>
                        </select>
                    </label>
                    <br/>
                    <FormInput
                        /* Link the created ref to the title input */
                        fieldRef={nameInputRef}
                        type="text"
                        name="Site/url"
                        // value={this.state.newEstablishment.site}
                        onChange={handleFormInputChange}
                        placeholder="Site/url"
                    />
                    <FormInput
                        /* Link the created ref to the title input */
                        fieldRef={nameInputRef}
                        type="text"
                        name="Address"
                        // value={this.state.newEstablishment.address}
                        onChange={handleFormInputChange}
                        placeholder="Address"
                    />
                    <FormInput
                        /* Link the created ref to the title input */
                        fieldRef={nameInputRef}
                        type="number"
                        name="Phone"
                        // value={this.state.newEstablishment.address}
                        onChange={handleFormInputChange}
                        placeholder="Phone"
                    />
                    <FormInput
                        /* Link the created ref to the title input */
                        fieldRef={nameInputRef}
                        type="text"
                        name="Description"
                        // value={this.state.newEstablishment.description}
                        onChange={handleFormInputChange}
                        placeholder="Description"
                    />
                    <button type="submit">Add Establishment</button>
                </form>
            </>
        );
    // }
}

/* FormInput component - uses the object destructuring syntax for the props */
function FormInput({ type, name, value, onChange, placeholder, fieldRef }) {
    return (
        /* Wrap both elements in a React Fragment */
        <>
            {/* Render the input with the passed props */}
            <input
                type={type}
                name={name}
                value={value}
                placeholder={placeholder}
                onChange={onChange}
                /* fieldRef defaults to null if no ref is given */
                ref={fieldRef ? fieldRef : null}
            />
            {/* Render a line break after the input */}
            <br />
        </>
    );
}